\documentclass[article,nojss]{jss}


<<package,include=FALSE,echo=FALSE>>=
options(keep.source = TRUE, width = 60)
packageInfo <- packageDescription("vipor")
library(vipor)
packageKeywords<-"visualization, display, one dimensional, grouped, groups, violin, scatter, points, quasirandom, beeswarm, van der Corput, beanplot"
@
%\VignetteIndexEntry{\Sexpr{packageInfo$Package} method comparisons}
%\VignetteDepends{lattice,beeswarm,ggplot2,beanplot}
%\VignetteKeywords{\Sexpr{packageKeywords}}
%\VignettePackage{\Sexpr{packageInfo$Package}}

\title{Grouped one dimensional data comparison (\pkg{\Sexpr{packageInfo$Package}} version \Sexpr{packageInfo$Version})}
\author{\Sexpr{packageInfo$Author}}
\Plainauthor{\Sexpr{packageInfo$Author}}

\Address{
  Github: \url{http://github.com/sherrillmix/vipor}
}

\Keywords{\Sexpr{packageKeywords}}

\Abstract{
  This is a comparison of various methods for visualizing groups of 1-dimensional data with an emphasis on the \pkg{\Sexpr{packageInfo$Package}} package.
}

\begin{document}
\SweaveOpts{engine=R,eps=FALSE}

\section{Methods}
There are several ways to plot grouped one-dimensional data combining points and density estimation:
\begin{description}
	\item[pseudorandom] The kernel density is estimated then points are distributed uniform randomly within the density estimate for a given bin.  Selection of an appropriate number of bins does not greatly affect appearance but coincidental clumpiness is common.
	\item[alternating within bins] The kernel density is estimated then points are distributed within the density estimate for a given bin evenly spaced with extreme values alternating from right to left e.g. max, 3rd max, ..., 4th max, 2nd max. If maximums are placed on the outside then these plots often form consecutive ``smiley'' patterns. If minimums are placed on the outside then ``frowny'' patterns are generated. Selection of the number of bins can have large effects on appearance important.
	\item[beanplot] The package \pkg{beeswarm} provides methods for generating a ``beeswarm'' plot where points are distibuted so that no points overlap. Kernel density is not calculated although the resulting plot does provide an approximate density estimate.  Selection of an appropriate number of bins affects appearance and plot and point sizes must be known in advance.
	\item[quasirandom] The kernel density is estimated then points are distributed quasirandomly using the von der Corput sequence within the density estimate for a given bin.  Selection of an appropriate number of bins does not greatly affect appearance and position does not depend on plotting parameters.
\end{description}


\section{Simulated data}
To compare between methods we'll generate some simulated data from normal, bimodal (two normal) and Cauchy distributions:
<<simData, echo=TRUE, eval=TRUE>>=
  library(vipor)
  library(beeswarm)
  library(beanplot)
  library(vioplot)
  set.seed(12345)

  dat <- list(rnorm(50), rnorm(500), c(rnorm(100),
    rnorm(100,5)), rcauchy(100))
  names(dat) <- c("Normal", "Dense Normal", "Bimodal", "Extremes")
@

We plot the data using quasirandom, pseudorandom, alternating and beeswarm methods:% (Figure \ref{figVpPlot}):
<<simmed, echo=TRUE, eval=FALSE>>=
  par(mfrow=c(4,1), mar=c(2.5,3.1, 1.2, 0.5),mgp=c(2.1,.75,0),
    cex.axis=1.2,cex.lab=1.2,cex.main=1.2)
  dummy<-sapply(names(dat),function(label) {
    y<-dat[[label]]
    offsets <- list(
      'Quasi'=offsetX(y),  # Default
      'Pseudo'=offsetX(y, method='pseudorandom',nbins=100),
      'Frown'=offsetX(y, method='frowney',nbins=20),
      'Smile\n20 bin'=offsetX(y, method='smiley',nbins=20),
      'Smile\n100 bin'=offsetX(y, method='smiley',nbins=100),
      'Smile\nn/5 bin'=offsetX(y, method='smiley',nbins=round(length(y)/5)),
      'Beeswarm'=swarmx(rep(0,length(y)),y)$x
    )
    ids <- rep(1:length(offsets), each=length(y))
    plot(unlist(offsets) + ids, rep(y, length(offsets)),
        xlab='', xaxt='n', pch=21,las=1,main=label, ylab='y value',
        col='#00000099',bg='#00000033')
  par(lheight=.8)
  axis(1, 1:length(offsets), names(offsets),padj=1,mgp=c(0,-.3,0),tcl=-.5)
})
@
\begin{center}
<<plotSimmed, fig=TRUE, height=8, width=7, echo=FALSE>>=
<<simmed>>
@
\end{center}

And also plot using \code{boxplot}, \code{beanplot} and \code{vioplot} methods:% (Figure \ref{figVpPlot}):
<<simmedBox, echo=TRUE, eval=FALSE>>=
  x<-rep(names(dat),sapply(dat,length))
  y<-unlist(lapply(dat,function(x)x/max(abs(x))))
  par(mfrow=c(4,1), mar=c(6,4.5, 1.2, 0.5),mgp=c(3.3,.75,0),
    cex.axis=1.2,cex.lab=1.2,cex.main=1.2,las=1)
  vpPlot(x,y, ylab='',cex=.7, pch=21,
    col='#00000044',bg='#00000011')
  boxplot(y~x,main='Boxplot',ylab='')
  beanplot(y~x,main='Beanplot',ylab='')
  vioInput<-split(y,x)
  labs<-names(vioInput)
  names(vioInput)[1]<-'x'
  do.call(vioplot,c(vioInput,list(names=labs,col='white')))
  title(main='Vioplot')
@
\begin{center}
<<plotSimmedBox, fig=TRUE, height=8, width=7, echo=FALSE>>=
<<simmedBox>>
@
\end{center}


\section{Real data}
\subsection{Few data points}
An example with few data points (maybe a bit too few for optimal use of this package) using the \code{OrchardSprays} data from the \pkg{datasets} package:
<<vpOrchard, echo=TRUE, eval=FALSE>>=
  par(mfrow=c(4,1), mar=c(3.5,3.1, 1.2, 0.5),mgp=c(2.1,.75,0),
    cex.axis=1.2,cex.lab=1.2,cex.main=1.2,las=1)
  #simple function to avoid repeating code
  plotFunc<-function(x,y,offsetXArgs){
    vpPlot(x,y, ylab='Log treatment effect', pch=21,
      col='#00000099',bg='#00000033', offsetXArgs=offsetXArgs)
    title(xlab='Treatment')
    addMeanLines(x,y)
  }
  addMeanLines<-function(x,y){
    means<-tapply(y,x,mean)
    segments(
     1:length(means)-.25,means,1:length(means)+.25,means,
     col='#FF000099',lwd=2
    )
  }
  #quasirandom
  plotFunc(OrchardSprays$treatment,log(OrchardSprays$decrease),
    list(width=.2))
  title(main='Quasirandom')
  #pseudorandom
  plotFunc(OrchardSprays$treatment,log(OrchardSprays$decrease),
    list(method='pseudo',width=.2))
  title(main='Pseudorandom')
  #smiley
  plotFunc(OrchardSprays$treatment,log(OrchardSprays$decrease),
    list(method='smiley',width=.2))
  title(main='Smiley')
  #beeswarm
  beeInput<-split(log(OrchardSprays$decrease), OrchardSprays$treatment)
  beeswarm(beeInput,las=1,ylab='Log treatment effect',xlab='Treatment',
    pch=21, col='#00000099',bg='#00000033', main='Beeswarm')
  addMeanLines(OrchardSprays$treatment,log(OrchardSprays$decrease))
@
\begin{center}
<<showVpOrchard, fig=TRUE, height=6, width=7, echo=FALSE>>=
<<vpOrchard>>
@
\end{center}

\subsection{Discrete data}
Data with discrete bins are plotted adequately although other display choices (e.g. multiple barplots) might be better for final publication. For example the \code{singer} data from the \pkg{lattice} package has its data rounded to the nearest inch:
<<vpSinger, echo=TRUE, eval=FALSE>>=
  data('singer',package='lattice')
  parts<-sub(' [0-9]+$','',singer$voice)
  par(mfrow=c(4,1), mar=c(3.5,3.1, 1.2, 0.5),mgp=c(2.1,.75,0),
    cex.axis=1.2,cex.lab=1.2,cex.main=1.2,las=1)
  #simple function to avoid repeating code
  plotFunc<-function(x,y,...){
    vpPlot(x,y, ylab='Height',pch=21,col='#00000099',bg='#00000033',...)
    addMeanLines(x,y)
  }
  #quasirandom
  plotFunc(parts,singer$height)
  title(main='Quasirandom')
  #pseudorandom
  plotFunc(parts,singer$height,offsetXArgs=list(method='pseudo'),
    main='Pseudorandom')
  #smiley
  plotFunc(parts,singer$height,offsetXArgs=list(method='smiley'),
    main='Smiley')
  #beeswarm
  beeInput<-split(singer$height, parts)
  beeswarm(beeInput,ylab='Height',main='Beeswarm',
    pch=21, col='#00000099',bg='#00000033')
  addMeanLines(parts,singer$height)
@
\begin{center}
<<showVpSinger, fig=TRUE, height=7, width=7, echo=FALSE>>=
<<vpSinger>>
@
\end{center}

\subsection{Moderately sized data}

An example with using the \code{beaver1} and \code{beaver2} data from the \pkg{datasets} package:
<<vpBeaver, echo=TRUE, eval=FALSE>>=
  y<-c(beaver1$temp,beaver2$temp)
  x<-rep(c('Beaver 1','Beaver 2'), c(nrow(beaver1),nrow(beaver2)))
  par(mfrow=c(4,1), mar=c(3.5,4, 1.2, 0.5),mgp=c(3,.75,0),
    cex.axis=1.2,cex.lab=1.2,cex.main=1.2)
  #simple function to avoid repeating code
  plotFunc<-function(x,y,...){
    vpPlot(x,y, las=1, ylab='Body temperature',pch=21,
      col='#00000099',bg='#00000033',...)
    addMeanLines(x,y)
  }
  #quasirandom
  plotFunc(x,y,main='Quasirandom')
  #pseudorandom
  plotFunc(x,y,offsetXArgs=list(method='pseudo'),main='Pseudorandom')
  #smiley
  plotFunc(x,y,offsetXArgs=list(method='smiley'),main='Smiley')
  #beeswarm
  beeInput<-split(y,x)
  beeswarm(beeInput,las=1,ylab='Body temperature',main='Beeswarm',
    pch=21, col='#00000099',bg='#00000033')
  addMeanLines(x,y)
@
\begin{center}
<<showBeaver, fig=TRUE, height=7, width=4, echo=FALSE>>=
<<vpBeaver>>
@
\end{center}

\subsection{Larger data}

An example using the \code{EuStockMarkets} data from the \pkg{datasets} package. Here \code{beeswarm} takes too long to run and generates overlap between entries and so only a single group is displayed:
<<vpStock, echo=TRUE, eval=FALSE>>=
  y<-as.vector(EuStockMarkets)
  x<-rep(colnames(EuStockMarkets), each=nrow(EuStockMarkets))
  par(mfrow=c(4,1), mar=c(4,4.3, 1.2, 0.5),mgp=c(3.3,.75,0),
    cex.axis=1.2,cex.lab=1.2,cex.main=1.2,las=1)
  #simple function to avoid repeating code
  plotFunc<-function(x,y,...){
    vpPlot(x,y, ylab='Price',cex=.7,
      pch=21, col='#00000011',bg='#00000011',...)
    addMeanLines(x,y)
  }
  #quasirandom
  plotFunc(x,y,main='Quasirandom')
  #pseudorandom
  plotFunc(x,y,offsetXArgs=list(method='pseudo'),main='Pseudorandom')
  #smiley
  plotFunc(x,y,offsetXArgs=list(method='smiley'),main='Smiley')
  #beeswarm
  #beeInput<-split(y,x)
  beeswarm(EuStockMarkets[,'DAX',drop=FALSE],cex=.7, ylab='Price',
    main='Beeswarm',pch=21, col='#00000099',bg='#00000033')
  #addMeanLines(x,y)
@
\begin{center}
<<showStock, fig=TRUE, height=7, width=4, echo=FALSE>>=
<<vpStock>>
@
\end{center}

%Another example using the \code{integrations} data from this package. Here \code{beeswarm} takes too long to run and is omitted:
%<<vpInts, echo=TRUE, eval=FALSE>>=
%  ints<-integrations[integrations$nearestGene>0,]
%  y<-log(ints$nearestGene)
%  x<-paste(ints$study,ints$latent)
%  cols<-ifelse(ints$latent=='Active','#FF000033','#0000FF33')
%  par(mfrow=c(4,1), mar=c(4,4, 1.2, 0.5),mgp=c(3.3,.75,0),
%    cex.axis=1.2,cex.lab=1.2,cex.main=1.2)
%  #simple function to avoid repeating code
%  plotFunc<-function(x,y,...){
%    vpPlot(x,y,las=1, ylab='Log distance to gene',cex=.7,
%      pch=21, col='#00000011',bg='#00000011',...)
%    addMeanLines(x,y)
%  }
%  #quasirandom
%  plotFunc(x,y,main='Quasirandom')
%  #pseudorandom
%  plotFunc(x,y,offsetXArgs=list(method='pseudo'),main='Pseudorandom')
%  #smiley
%  plotFunc(x,y,offsetXArgs=list(method='smiley'),main='Smiley')
%  #beeswarm
%  #beeInput<-split(y,x)
%  #beeswarm(beeInput,las=1,cex=.7, ylab='Log distance to gene',
%    #main='Beeswarm',pch=21, col='#00000099',bg='#00000033')
%  #addMeanLines(x,y)
%@
%\begin{center}
%<<showInts, fig=TRUE, height=7, width=4, echo=FALSE>>=
%<<vpInts>>
%@
%\end{center}

Another example using 3000 entries of the \code{diamonds} data from the \pkg{ggplot2} package. Here \code{beeswarm} takes too long to run and is omitted:
<<vpDiamond, echo=TRUE, eval=FALSE>>=
  select<-sample(1:nrow(ggplot2::diamonds),3000)
  y<-log10(ggplot2::diamonds[select,'price'])
  x<-ggplot2::diamonds[select,'cut']
  par(mfrow=c(4,1), mar=c(6,4.5, 1.2, 0.5),mgp=c(3.3,.75,0),
    cex.axis=1.2,cex.lab=1.2,cex.main=1.2,las=1)
  #simple function to avoid repeating code
  prettyYAxis<-function(y){
    prettyY<-pretty(y)
    yLabs<-sapply(prettyY,function(x)as.expression(bquote(10^.(x))))
    axis(2,prettyY,yLabs)
  }
  #quasirandom
  vpPlot(x,y,offsetXArgs=list(varwidth=TRUE), 
    ylab='Price',cex=.7,pch=21, col='#00000044',
    bg='#00000011',yaxt='n',main='Quasirandom')
  prettyYAxis(y)
  boxplot(y~x,main='Boxplot',ylab='Price',yaxt='n')
  prettyYAxis(y)
  beanplot(y~x,main='Beanplot',ylab='Price',yaxt='n')
  prettyYAxis(y)
  vioInput<-split(y,x)
  labs<-names(vioInput)
  names(vioInput)[1]<-'x'
  do.call(vioplot,c(vioInput,list(names=labs,col='white')))
  title(ylab='Price', main='Vioplot')
@
\begin{center}
<<showDiamond, fig=TRUE, height=7, width=6, echo=FALSE>>=
<<vpDiamond>>
@
\end{center}




\end{document}
